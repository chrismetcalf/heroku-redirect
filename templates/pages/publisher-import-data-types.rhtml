<h1>Import Data Types</h1>

<p>So you want to publish your data online. You want it to look awesome, you want it to be useful and you want people to be able to search and filter it efficiently. Data types are critical to all of these functions, but how do you know when something is a valid type or not? How do you format your date column so it appears as a date? How do you get percentages to properly appear?</p>

<h2>Supported Types on Import</h2>

<p>We only try to detect certain supported types on import. There are many other data types that we support but you'll have to either convert your columns after import or enter the data manually.</p>

<p>The following types are supported:</p>

<h3>Numbers, Money, and Percent</h3>

<p>For numbers we directly use Java's BigDecimal parsing. For details see the <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String)">Java documentation</a>.</p>

<p>A percent can be either a number preceded or followed by a percent (%) sign or just a number. Percentages aren't in the range 0.0 to 1.0 like they are in Excel. A percentage input of <code>42.0</code> is idiomatically <code>42.0%</code>.</p>

<p>Money can be either a number preceded with a dollar sign ($ -- more currency symbols soon) or just a number. For negative monetary values, either a negative sign or a set of parentheses are acceptable: e.g. <code>$-42.21</code>, <code>($42.21)</code>, <code>-$42.21</code> or <code>(42.21)</code>.</p>

<h3>Dates and Times</h3>

<p>Dates are parsed by default in the American/Pacific (PST) timezone. You can explicitly specify a timezone by using the supported <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> subset. A <code>Z</code> character is UTC, otherwise the offset is <code>[+-]HH:mm</code>.</p>

<p>For inputs that don't specify a time of date, the resulting time is undefined. In other words, don't rely on it being anything consistent.</p>

<p>The accepted input formats (ISO and non-ISO) are:</p>

<h4>Supported ISO 8601 Subset</h4>

<ul>
  <li><code>yyyy-MM-dd[T]HH:mm:ssZ</code> (e.g. "<em>1920-01-22T00:00:00Z</em>", "<em>1920-01-22T00:00:00-10:00</em>", or "<em>1920-01-22 00:00:00Z</em>")</li>
  <li><code>yyyy-MM-dd[T]HH:mm:ss</code> (e.g. "<em>1920-01-22T00:00:00</em>" or "<em>1920-01-22 00:00:00</em>")</li>
  <li><code>yyyy-MM-dd[T]HH:mm</code> (e.g. "<em>1920-01-22T00:00</em>")</li>
  <li><code>yyyy-MM-dd</code> (e.g. "<em>1920-01-22</em>")</li>
</ul>

<h4>Supported non-ISO Dates</h4>

<p>For dates other than the ISO subset we accept a date, optionally followed by a time, i.e.</p>

<pre>
(date)[ (time)]
</pre>

<p>Non-ISO dates are always parsed in the American date format locale (i.e. month, day, year). Months and days can be either single or double digit and may or may not be led with a '0'. Years can be either four digits (preferred) or two. If a year is two digits it will be assumed to be between 1951 and 2050: i.e. 1/2/75 would be January 2nd 1975, but 1/2/49 would be January 2nd 2049.</p>

<p>The accepted input formats are:</p>

<ul>
  <li><code>MMM d, yyyy</code> (e.g. "<em>Jan 4, 1982</em>")</li>
  <li><code>MMM d, yy</code> (e.g. "<em>Jan 4, 82</em>")</li>
  <li><code>MMMM d, yyyy</code> (e.g. "<em>January 4, 1982</em>")</li>
  <li><code>MMMM d, yy</code> (e.g. "<em>January 4, 82</em>")</li>
  <li><code>M-d-yyyy</code> (e.g. "<em>1-4-1982</em>")</li>
  <li><code>M/d/yyyy</code> (e.g. "<em>1/4/1982</em>")</li>
  <li><code>M.d.yyyy</code> (e.g. "<em>1.4.1982</em>")</li>
  <li><code>M-d-yy</code> (e.g. "<em>1-4-82</em>")</li>
  <li><code>M/d/yy</code> (e.g. "<em>1/4/82</em>")</li>
  <li><code>M.d.yy</code> (e.g. "<em>1.4.82</em>")</li>
</ul>

<h3>Checkboxes</h3>

<p>Valid false values:</p>

<ul>
  <li><em>0</em></li>
  <li><em>f</em></li>
  <li><em>false</em></li>
  <li><em>n</em></li>
  <li><em>no</em></li>
  <li><em>off</em></li>
</ul>

<p>Valid true values:</p>

<ul>
  <li><em>1</em></li>
  <li><em>t</em></li>
  <li><em>true</em></li>
  <li><em>y</em></li>
  <li><em>yes</em></li>
  <li><em>on</em></li>
</ul>

<h3>Emails</h3>

<p>Three different input formats are acceptable for emails.</p>

<ol>
  <li><code>&lt;a href=&quot;mailto:sam.gibson@socrata.com&quot;&gt;Sam Gibson&lt;/a&gt;</code></li>
  <li><code>sam.gibson@socrata.com</code></li>
  <li><code>Sam Gibson &lt;sam.gibson@socrata.com&gt;</code></li>
</ol>

<p>Nearly all emails should work, though technically for performance' sake we only support a subset of the RFC regex for emails. If there's a specific email or set of emails that's causing you a problem, please feel free to submit a support ticket and we'll fix it.</p>

<h3>Website Links/URLs</h3>

<p>URL's support two different input formats. Only three URL schemes are acceptable: <code>ftp</code>, <code>http</code>, and <code>https</code>. We use a custom regular expression to validate URLs. It should accept just about anything that you throw at it, but there's always a chance that it's missed something.</p>

<ol>
  <li><code>&lt;a href&quot;http://www.socrata.com/&quot;&gt;Socrata&lt;/a&gt;</code></li>
  <li><code>http://www.socrata.com/</code></li>
</ol>

<h3>Location Columns</h3>

<p>Since Location columns are a "composite" column that's created by appending multiple values together, they can only be created if the data in the matching column is formatted in the correct manner.</p>

<ol>
  <li>To format a latitude and longitude pair to be appended or refreshed, format the values in the given column as: <code>(xx.xxx, yyy.yyy)</code> where <code>xx.xxx</code> is the latitude and <code>yyy.yyy</code> is the longitude. Make sure that your values are in decimal degrees, and that you use "negative" longitude degrees for "degrees west" (ie. "-<em>122.36</em>" for Seattle, WA, and "<em>2.33</em>" for Paris, France).</li>
  <li>To append or refresh an address, simply format it as a comma separated US-formatted address within the column, such as <code>101 Yesler Way, Seattle, WA, 98108</code>. It'll automatically be queued up for geocoding if the address parser recognizes the format.</li>
  <li>You can also specify a latitude and longitude pair along with your address: <code>101 Yesler Way, Seattle, WA, 98108 (47.60165, -122.33403)</code>.</li>
</ol>

<p>Whatever file format you use, make sure that the values in your location column are properly escaped. For example, for CSV, an address must be wrapped in double-quotes in order to escape the commas within it:</p>

<pre>
"47.60165, -122.33403"
</pre>
